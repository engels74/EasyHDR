//! GUI controller implementation
//!
//! This module implements the bridge between the Slint UI and the
//! application controller.
//!
//! The GuiController acts as the bridge between the Slint-based GUI and the
//! application logic controller. It:
//! - Manages the MainWindow Slint component
//! - Receives state updates from AppController via mpsc channel
//! - Provides callbacks for GUI interactions (add/remove apps, toggle enabled)
//! - Handles file picker dialogs and error messages
//!
//! # Requirements
//!
//! - Requirement 5.1: Main window displays with title bar, app list, and status indicator

use easyhdr::controller::{AppController, AppState};
use easyhdr::error::Result;
use parking_lot::Mutex;
use std::sync::{mpsc, Arc};

// MainWindow is generated by Slint from ui/main.slint
// It will be available after slint::include_modules!() in main.rs
// We reference it from the parent module (main.rs)
use crate::MainWindow;

/// GUI controller that bridges Slint UI and application logic
///
/// This struct manages the main window and coordinates between the GUI
/// and the application controller. It receives state updates from the
/// controller and updates the UI accordingly.
///
/// # Fields
///
/// - `main_window`: The Slint MainWindow component
/// - `controller_handle`: Shared reference to the AppController for callbacks
/// - `state_receiver`: Channel receiver for AppState updates from controller
///
/// # Requirements
///
/// - Requirement 5.1: Main window displays with title bar and controls
pub struct GuiController {
    /// The Slint main window component
    main_window: MainWindow,
    /// Shared reference to the application controller
    controller_handle: Arc<Mutex<AppController>>,
    /// Channel receiver for state updates from the controller
    state_receiver: mpsc::Receiver<AppState>,
}

impl GuiController {
    /// Create a new GUI controller
    ///
    /// This constructor creates the MainWindow Slint component and sets up
    /// the bridge between the GUI and the application controller.
    ///
    /// # Arguments
    ///
    /// * `controller` - Shared reference to the AppController
    /// * `state_receiver` - Channel receiver for AppState updates
    ///
    /// # Returns
    ///
    /// Returns a new GuiController instance with the main window created
    /// and ready to display.
    ///
    /// # Errors
    ///
    /// Returns an error if the MainWindow cannot be created.
    ///
    /// # Requirements
    ///
    /// - Requirement 5.1: Create main window with title bar and controls
    ///
    /// # Example
    ///
    /// ```no_run
    /// use std::sync::{mpsc, Arc};
    /// use parking_lot::Mutex;
    /// use easyhdr::controller::AppController;
    /// use easyhdr::gui::GuiController;
    ///
    /// let (state_tx, state_rx) = mpsc::channel();
    /// let controller = Arc::new(Mutex::new(/* AppController instance */));
    /// let gui = GuiController::new(controller, state_rx)?;
    /// # Ok::<(), easyhdr::error::EasyHdrError>(())
    /// ```
    pub fn new(
        controller: Arc<Mutex<AppController>>,
        state_receiver: mpsc::Receiver<AppState>,
    ) -> Result<Self> {
        use easyhdr::error::EasyHdrError;
        use tracing::info;

        info!("Creating GUI controller");

        // Create the main window
        let main_window = MainWindow::new()
            .map_err(|e| EasyHdrError::ConfigError(format!("Failed to create main window: {}", e)))?;

        info!("Main window created successfully");

        Ok(Self {
            main_window,
            controller_handle: controller,
            state_receiver,
        })
    }
}

