// Main window UI definition for EasyHDR
// Implements task 9.1: Create main window UI definition
// Implements task 9.4: Theme support with Palette and StyleMetrics
// Implements task 12.1: Settings dialog/panel component
// Requirements: 5.1, 5.2, 5.3, 5.4, 5.8, 5.9, 5.13, 6.1, 6.2, 6.3, 6.4

import { Button, ListView, CheckBox, Palette, StyleMetrics, Slider } from "std-widgets.slint";

// AppListItem struct represents a configured application in the list
// Fields: id (UUID), display-name (app name), exe-path (full path), enabled (checkbox state), icon (app icon)
export struct AppListItem {
    id: string,
    display-name: string,
    exe-path: string,
    enabled: bool,
    icon: image,
}

// Settings dialog content component (Task 12.1, Requirements 6.1-6.4)
// Provides UI for configuring user preferences:
// - Auto-start on Windows login
// - Monitoring interval (500-2000ms)
// - Tray notifications on HDR changes
component SettingsDialogContent inherits Rectangle {
    // Properties for settings values
    in-out property <bool> auto-start: false;
    in-out property <int> monitoring-interval-ms: 1000;
    in-out property <bool> show-tray-notifications: true;

    // Callbacks
    callback save-settings(bool, int, bool);
    callback cancel-settings();

    background: Palette.background;
    border-width: 2px;
    border-color: Palette.border;
    border-radius: 8px;

        VerticalLayout {
            padding: StyleMetrics.layout-padding * 2;
            spacing: StyleMetrics.layout-spacing * 2;

            // Title
            Text {
                text: "Settings";
                font-size: 18px;
                font-weight: 700;
                color: Palette.foreground;
            }

            // Auto-start setting (Requirement 6.1)
            HorizontalLayout {
                spacing: StyleMetrics.layout-spacing;
                CheckBox {
                    text: "Auto-start on Windows login";
                    checked <=> auto-start;
                }
            }

            // Monitoring interval setting (Requirement 6.2)
            VerticalLayout {
                spacing: 4px;
                Text {
                    text: "Monitoring interval: " + round(monitoring-interval-ms) + "ms";
                    color: Palette.foreground;
                    font-size: 13px;
                }
                HorizontalLayout {
                    spacing: StyleMetrics.layout-spacing;
                    Text {
                        text: "500ms";
                        color: Palette.foreground.transparentize(0.4);
                        font-size: 11px;
                        vertical-alignment: center;
                    }
                    Slider {
                        minimum: 500;
                        maximum: 2000;
                        value: monitoring-interval-ms;
                        horizontal-stretch: 1;
                        changed(value) => {
                            monitoring-interval-ms = round(value);
                        }
                    }
                    Text {
                        text: "2000ms";
                        color: Palette.foreground.transparentize(0.4);
                        font-size: 11px;
                        vertical-alignment: center;
                    }
                }
            }

            // Tray notifications setting (Requirement 6.4)
            HorizontalLayout {
                spacing: StyleMetrics.layout-spacing;
                CheckBox {
                    text: "Show tray notifications on HDR changes";
                    checked <=> show-tray-notifications;
                }
            }

            // Spacer to push buttons to bottom
            Rectangle {
                vertical-stretch: 1;
            }

            // Dialog buttons
            HorizontalLayout {
                spacing: StyleMetrics.layout-spacing;

                // Spacer to push buttons to the right
                Rectangle {
                    horizontal-stretch: 1;
                }

                Button {
                    text: "Cancel";
                    clicked => {
                        cancel-settings();
                    }
                }
                Button {
                    text: "Save";
                    clicked => {
                        save-settings(auto-start, monitoring-interval-ms, show-tray-notifications);
                    }
                }
            }
        }
    }

export component MainWindow inherits Window {
    title: "EasyHDR";
    preferred-width: 600px;
    preferred-height: 500px;

    // Properties
    in-out property <[AppListItem]> app-list: [];
    in-out property <bool> hdr-enabled: false;
    in-out property <int> selected-index: -1;

    // Settings properties (synced with backend)
    in-out property <bool> settings-auto-start: false;
    in-out property <int> settings-monitoring-interval-ms: 1000;
    in-out property <bool> settings-show-tray-notifications: true;

    // Callbacks
    callback add-application();
    callback remove-application(int);
    callback toggle-enabled(int, bool);
    callback open-settings();
    callback save-settings(bool, int, bool);

    VerticalLayout {
        padding: StyleMetrics.layout-padding;
        spacing: StyleMetrics.layout-spacing;

        // HDR Status indicator (Requirement 5.8, 5.13)
        // Shows colored circle (green for ON, red for OFF) and text label
        // Theme-aware colors with clear ON/OFF distinction
        HorizontalLayout {
            spacing: StyleMetrics.layout-spacing;
            Text {
                text: "HDR Status:";
                font-size: 14px;
                color: Palette.foreground;
            }
            Rectangle {
                width: 16px;
                height: 16px;
                border-radius: 8px;
                // Use semantic colors: success green for ON, error red for OFF
                background: hdr-enabled ? #00cc00 : #cc0000;
            }
            Text {
                text: hdr-enabled ? "ON" : "OFF";
                font-size: 14px;
                font-weight: 700;
                color: Palette.foreground;
            }
        }

        // Application list container (Requirements 5.2, 5.3, 5.4, 5.13)
        // Task 9.2: Implement application list display with proper styling
        // Task 9.4: Theme-aware colors and spacing
        Rectangle {
            border-width: 1px;
            border-color: Palette.border;
            border-radius: 4px;
            background: Palette.alternate-background;

            // Empty state message (Requirement 5.4)
            if app-list.length == 0: Text {
                text: "No applications configured. Click 'Add Application' to get started.";
                horizontal-alignment: center;
                vertical-alignment: center;
                color: Palette.foreground;
            }

            // Scrollable ListView for application list (Requirements 5.2, 5.3, 5.13)
            if app-list.length > 0: ListView {
                for item[index] in app-list: VerticalLayout {
                    // List item row with visual highlight for selection
                    Rectangle {
                        // Visual highlight for selected row - theme-aware
                        background: selected-index == index ? Palette.selection-background : Colors.transparent;

                        // Touch area for row click handling - covers entire row
                        TouchArea {
                            clicked => {
                                selected-index = index;
                            }
                        }

                        HorizontalLayout {
                            spacing: StyleMetrics.layout-spacing;
                            padding: StyleMetrics.layout-padding;

                            // Application icon (32x32)
                            Image {
                                source: item.icon;
                                width: 32px;
                                height: 32px;
                            }

                            // Application name and path with truncation
                            VerticalLayout {
                                spacing: 2px;

                                Text {
                                    text: item.display-name;
                                    font-weight: 600;
                                    font-size: 13px;
                                    overflow: elide;
                                    color: Palette.foreground;
                                }
                                Text {
                                    text: item.exe-path;
                                    font-size: 11px;
                                    color: Palette.foreground.transparentize(0.4);
                                    overflow: elide;
                                }
                            }

                            // Spacer to push checkbox to the right
                            Rectangle {
                                horizontal-stretch: 1;
                            }

                            // Enabled checkbox aligned to the right
                            CheckBox {
                                checked: item.enabled;
                                toggled => {
                                    toggle-enabled(index, self.checked);
                                }
                            }
                        }
                    }

                    // Row separator line - theme-aware
                    Rectangle {
                        height: 1px;
                        background: Palette.border;
                    }
                }
            }
        }

        // Bottom toolbar with buttons (Requirement 5.9, 5.13, 5.14)
        // Theme-aware spacing
        HorizontalLayout {
            spacing: StyleMetrics.layout-spacing;
            Button {
                text: "Add Application(s)";
                clicked => {
                    add-application();
                }
            }
            Button {
                text: "Remove Selected";
                enabled: selected-index >= 0;
                clicked => {
                    remove-application(selected-index);
                }
            }

            // Spacer to push right-aligned buttons to the right
            Rectangle {
                horizontal-stretch: 1;
            }

            // Settings button (Task 12.1)
            Button {
                text: "Settings";
                clicked => {
                    settings-dialog.show();
                }
            }
        }

        // Drag-and-drop hint (Requirement 5.14)
        // Inform users about drag-and-drop functionality
        Text {
            text: "Tip: You can select multiple .exe files at once using the file dialog";
            font-size: 11px;
            color: Palette.foreground.transparentize(0.5);
            horizontal-alignment: center;
        }
    }

    // Settings dialog popup (Task 12.1, Requirements 6.1-6.4)
    settings-dialog := PopupWindow {
        x: (parent.width - 500px) / 2;
        y: (parent.height - 400px) / 2;
        width: 500px;
        height: 400px;
        close-policy: PopupClosePolicy.no-auto-close;

        SettingsDialogContent {
            auto-start <=> settings-auto-start;
            monitoring-interval-ms <=> settings-monitoring-interval-ms;
            show-tray-notifications <=> settings-show-tray-notifications;

            save-settings(auto-start, monitoring-interval-ms, show-tray-notifications) => {
                root.save-settings(auto-start, monitoring-interval-ms, show-tray-notifications);
                settings-dialog.close();
            }

            cancel-settings => {
                settings-dialog.close();
            }
        }
    }
}

