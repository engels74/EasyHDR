// Main window UI definition for EasyHDR
// Implements task 9.1: Create main window UI definition
// Implements task 9.4: Theme support with Palette and StyleMetrics
// Implements task 12.1: Settings dialog/panel component
// Requirements: 5.1, 5.2, 5.3, 5.4, 5.8, 5.9, 5.13, 6.1, 6.2, 6.3, 6.4
// Enhanced with modern, elegant visual design

import { Button, ListView, CheckBox, Palette, StyleMetrics, Slider } from "std-widgets.slint";

// Modern color constants for enhanced visual design
global DesignTokens {
    // Brand colors
    out property <color> brand-primary: #4A90E2;
    out property <color> brand-primary-dark: #357ABD;
    out property <color> brand-accent: #5DA3F5;

    // Status colors - vibrant but not overwhelming
    out property <color> status-success: #10B981;
    out property <color> status-success-glow: #10B98140;
    out property <color> status-error: #EF4444;
    out property <color> status-error-glow: #EF444440;

    // Neutral colors for layering and depth
    out property <color> surface-primary: #FFFFFF;
    out property <color> surface-secondary: #F8FAFC;
    out property <color> surface-tertiary: #F1F5F9;
    out property <color> border-light: #E2E8F0;
    out property <color> border-medium: #CBD5E1;

    // Text colors for proper contrast and readability
    out property <color> text-primary: #1E293B;      // Dark slate for primary text
    out property <color> text-secondary: #475569;    // Medium slate for secondary text
    out property <color> text-tertiary: #64748B;     // Light slate for tertiary/hint text
    out property <color> text-on-primary: #FFFFFF;   // White text on primary backgrounds

    // Shadow colors for depth
    out property <color> shadow-light: #00000010;
    out property <color> shadow-medium: #00000020;
    out property <color> shadow-strong: #00000030;

    // Typography
    out property <length> font-size-xs: 10px;
    out property <length> font-size-sm: 11px;
    out property <length> font-size-base: 13px;
    out property <length> font-size-lg: 14px;
    out property <length> font-size-xl: 16px;
    out property <length> font-size-2xl: 20px;
    out property <length> font-size-3xl: 24px;

    // Spacing scale
    out property <length> space-xs: 4px;
    out property <length> space-sm: 8px;
    out property <length> space-md: 12px;
    out property <length> space-lg: 16px;
    out property <length> space-xl: 20px;
    out property <length> space-2xl: 24px;

    // Border radius scale
    out property <length> radius-sm: 6px;
    out property <length> radius-md: 8px;
    out property <length> radius-lg: 12px;
    out property <length> radius-xl: 16px;
}

// AppListItem struct represents a configured application in the list
// Fields: id (UUID), display-name (app name), exe-path (full path), enabled (checkbox state), icon (app icon)
export struct AppListItem {
    id: string,
    display-name: string,
    exe-path: string,
    enabled: bool,
    icon: image,
}

// Custom styled button component with guaranteed text contrast
component StyledButton inherits Rectangle {
    in property <string> text;
    in property <bool> enabled: true;
    in property <bool> primary: false;
    callback clicked;

    // Modern button styling with proper contrast
    height: 32px;
    border-radius: DesignTokens.radius-sm;
    background: primary ?
        (touch-area.pressed ? DesignTokens.brand-primary-dark :
         (touch-area.has-hover ? DesignTokens.brand-primary : DesignTokens.brand-primary)) :
        (touch-area.pressed ? DesignTokens.surface-tertiary :
         (touch-area.has-hover ? DesignTokens.surface-secondary : DesignTokens.surface-primary));
    border-width: primary ? 0px : 1px;
    border-color: DesignTokens.border-medium;

    // Smooth transitions
    animate background {
        duration: 150ms;
        easing: ease-in-out;
    }

    touch-area := TouchArea {
        enabled: root.enabled;
        clicked => {
            root.clicked();
        }
    }

    HorizontalLayout {
        padding-left: DesignTokens.space-lg;
        padding-right: DesignTokens.space-lg;

        Text {
            text: root.text;
            color: root.enabled ?
                (primary ? DesignTokens.text-on-primary : DesignTokens.text-primary) :
                DesignTokens.text-tertiary;
            font-size: DesignTokens.font-size-base;
            font-weight: primary ? 600 : 400;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }
}

// Custom styled checkbox component with guaranteed text contrast
component StyledCheckBox inherits HorizontalLayout {
    in property <string> text;
    in-out property <bool> checked: false;
    callback toggled;

    spacing: DesignTokens.space-md;

    CheckBox {
        checked <=> root.checked;
        toggled => {
            root.toggled();
        }
    }

    Text {
        text: root.text;
        color: DesignTokens.text-primary;
        font-size: DesignTokens.font-size-base;
        vertical-alignment: center;
    }
}

// Settings dialog content component (Task 12.1, Requirements 6.1-6.4)
// Provides UI for configuring user preferences with modern, elegant styling
component SettingsDialogContent inherits Rectangle {
    // Properties for settings values
    in-out property <bool> auto-start: false;
    in-out property <int> monitoring-interval-ms: 1000;
    in-out property <bool> show-tray-notifications: true;
    in-out property <bool> minimize-to-tray-on-minimize: true;
    in-out property <bool> minimize-to-tray-on-close: false;

    // Callbacks
    callback save-settings(bool, int, bool, bool, bool);
    callback cancel-settings();

    // Modern card-like design with layered shadows
    background: DesignTokens.surface-primary;
    border-width: 1px;
    border-color: DesignTokens.border-light;
    border-radius: DesignTokens.radius-xl;
    drop-shadow-blur: 20px;
    drop-shadow-color: DesignTokens.shadow-medium;
    drop-shadow-offset-y: 4px;

        VerticalLayout {
            padding: DesignTokens.space-2xl;
            spacing: DesignTokens.space-xl;

            // Title with modern typography
            Text {
                text: "Settings";
                font-size: DesignTokens.font-size-3xl;
                font-weight: 700;
                color: DesignTokens.text-primary;
            }

            // Auto-start setting (Requirement 6.1)
            StyledCheckBox {
                text: "Auto-start on Windows login";
                checked <=> auto-start;
            }

            // Monitoring interval setting (Requirement 6.2)
            VerticalLayout {
                spacing: DesignTokens.space-sm;
                Text {
                    text: "Monitoring interval: " + round(monitoring-interval-ms) + "ms";
                    color: DesignTokens.text-primary;
                    font-size: DesignTokens.font-size-base;
                    font-weight: 600;
                }
                HorizontalLayout {
                    spacing: DesignTokens.space-md;
                    Text {
                        text: "500ms";
                        color: DesignTokens.text-secondary;
                        font-size: DesignTokens.font-size-sm;
                        vertical-alignment: center;
                    }
                    Slider {
                        minimum: 500;
                        maximum: 2000;
                        value: monitoring-interval-ms;
                        horizontal-stretch: 1;
                        changed(value) => {
                            monitoring-interval-ms = round(value);
                        }
                    }
                    Text {
                        text: "2000ms";
                        color: DesignTokens.text-secondary;
                        font-size: DesignTokens.font-size-sm;
                        vertical-alignment: center;
                    }
                }
            }

            // Tray notifications setting (Requirement 6.4)
            StyledCheckBox {
                text: "Show tray notifications on HDR changes";
                checked <=> show-tray-notifications;
            }

            // Minimize button behavior setting
            StyledCheckBox {
                text: "Minimize to tray (instead of taskbar)";
                checked <=> minimize-to-tray-on-minimize;
            }

            // Close button behavior setting
            StyledCheckBox {
                text: "Close to tray (instead of exiting)";
                checked <=> minimize-to-tray-on-close;
            }

            // Spacer to push buttons to bottom
            Rectangle {
                vertical-stretch: 1;
            }

            // Dialog buttons with modern spacing
            HorizontalLayout {
                spacing: DesignTokens.space-md;

                // Spacer to push buttons to the right
                Rectangle {
                    horizontal-stretch: 1;
                }

                StyledButton {
                    text: "Cancel";
                    clicked => {
                        cancel-settings();
                    }
                }
                StyledButton {
                    text: "Save";
                    primary: true;
                    clicked => {
                        save-settings(auto-start, monitoring-interval-ms, show-tray-notifications, minimize-to-tray-on-minimize, minimize-to-tray-on-close);
                    }
                }
            }
        }
    }

export component MainWindow inherits Window {
    title: "EasyHDR";
    icon: @image-url("../assets/icon.ico");
    preferred-width: 650px;
    preferred-height: 550px;
    default-font-family: "Segoe UI";

    // Properties
    in-out property <[AppListItem]> app-list: [];
    in-out property <bool> hdr-enabled: false;
    in-out property <int> selected-index: -1;

    // Settings properties (synced with backend)
    in-out property <bool> settings-auto-start: false;
    in-out property <int> settings-monitoring-interval-ms: 1000;
    in-out property <bool> settings-show-tray-notifications: true;
    in-out property <bool> settings-minimize-to-tray-on-minimize: true;
    in-out property <bool> settings-minimize-to-tray-on-close: false;

    // Callbacks
    callback add-application();
    callback remove-application(int);
    callback toggle-enabled(int, bool);
    callback open-settings();
    callback save-settings(bool, int, bool, bool, bool);

    // Modern background with subtle gradient
    background: DesignTokens.surface-secondary;

    VerticalLayout {
        padding: 0px;
        spacing: 0px;

        // Modern header with branding and HDR status
        Rectangle {
            height: 80px;
            background: @linear-gradient(180deg, DesignTokens.brand-primary 0%, DesignTokens.brand-primary-dark 100%);
            drop-shadow-blur: 8px;
            drop-shadow-color: DesignTokens.shadow-light;
            drop-shadow-offset-y: 2px;

            HorizontalLayout {
                padding-left: DesignTokens.space-xl;
                padding-right: DesignTokens.space-xl;
                padding-top: DesignTokens.space-lg;
                padding-bottom: DesignTokens.space-lg;
                spacing: DesignTokens.space-lg;

                // App icon and title
                HorizontalLayout {
                    spacing: DesignTokens.space-md;

                    Image {
                        source: @image-url("../assets/icon.ico");
                        width: 48px;
                        height: 48px;
                        image-fit: contain;
                    }

                    VerticalLayout {
                        spacing: DesignTokens.space-xs;

                        Text {
                            text: "EasyHDR";
                            font-size: DesignTokens.font-size-2xl;
                            font-weight: 700;
                            color: #FFFFFF;
                        }

                        Text {
                            text: "HDR Management Made Easy";
                            font-size: DesignTokens.font-size-sm;
                            color: #FFFFFF.transparentize(0.3);
                        }
                    }
                }

                // Spacer
                Rectangle {
                    horizontal-stretch: 1;
                }

                // Enhanced HDR Status indicator with glow effect
                Rectangle {
                    width: 180px;
                    height: 56px;
                    border-radius: DesignTokens.radius-lg;
                    background: #FFFFFF.transparentize(0.9);
                    border-width: 1px;
                    border-color: #FFFFFF.transparentize(0.7);

                    HorizontalLayout {
                        padding: DesignTokens.space-md;
                        spacing: DesignTokens.space-md;

                        // Status indicator with animated glow
                        Rectangle {
                            width: 32px;
                            height: 32px;
                            border-radius: 16px;
                            background: hdr-enabled ? DesignTokens.status-success : DesignTokens.status-error;
                            drop-shadow-blur: 12px;
                            drop-shadow-color: hdr-enabled ? DesignTokens.status-success-glow : DesignTokens.status-error-glow;

                            animate background {
                                duration: 300ms;
                                easing: ease-in-out;
                            }
                        }

                        VerticalLayout {
                            spacing: 2px;

                            Text {
                                text: "HDR Status";
                                font-size: DesignTokens.font-size-xs;
                                color: #FFFFFF.transparentize(0.3);
                            }

                            Text {
                                text: hdr-enabled ? "ENABLED" : "DISABLED";
                                font-size: DesignTokens.font-size-lg;
                                font-weight: 700;
                                color: #FFFFFF;
                            }
                        }
                    }
                }
            }
        }

        // Main content area
        VerticalLayout {
            padding: DesignTokens.space-xl;
            spacing: DesignTokens.space-lg;

            // Application list card with modern styling
            Rectangle {
                border-width: 1px;
                border-color: DesignTokens.border-light;
                border-radius: DesignTokens.radius-lg;
                background: DesignTokens.surface-primary;
                drop-shadow-blur: 8px;
                drop-shadow-color: DesignTokens.shadow-light;
                drop-shadow-offset-y: 2px;

                // Empty state with better styling
                if app-list.length == 0: VerticalLayout {
                    padding: DesignTokens.space-2xl;
                    spacing: DesignTokens.space-md;

                    Text {
                        text: "No Applications Configured";
                        horizontal-alignment: center;
                        font-size: DesignTokens.font-size-xl;
                        font-weight: 600;
                        color: DesignTokens.text-secondary;
                    }

                    Text {
                        text: "Click 'Add Application(s)' below to get started";
                        horizontal-alignment: center;
                        font-size: DesignTokens.font-size-base;
                        color: DesignTokens.text-tertiary;
                    }
                }

                // Scrollable ListView with modern card items
                if app-list.length > 0: ListView {
                    for item[index] in app-list: Rectangle {
                        // Modern list item with hover and selection states
                        border-radius: DesignTokens.radius-md;
                        background: selected-index == index ?
                            DesignTokens.brand-primary.transparentize(0.9) :
                            (touch-area.has-hover ? DesignTokens.surface-tertiary : Colors.transparent);

                        // Smooth transitions
                        animate background {
                            duration: 200ms;
                            easing: ease-in-out;
                        }

                        // Touch area for row interactions
                        touch-area := TouchArea {
                            clicked => {
                                selected-index = index;
                            }
                        }

                        HorizontalLayout {
                            spacing: DesignTokens.space-md;
                            padding: DesignTokens.space-md;

                            // Application icon with subtle shadow
                            Rectangle {
                                width: 40px;
                                height: 40px;
                                border-radius: DesignTokens.radius-sm;
                                background: DesignTokens.surface-secondary;

                                Image {
                                    source: item.icon;
                                    width: 36px;
                                    height: 36px;
                                    x: 2px;
                                    y: 2px;
                                    image-fit: contain;
                                }
                            }

                            // Application details with improved typography
                            VerticalLayout {
                                spacing: DesignTokens.space-xs;

                                Text {
                                    text: item.display-name;
                                    font-weight: 600;
                                    font-size: DesignTokens.font-size-base;
                                    overflow: elide;
                                    color: DesignTokens.text-primary;
                                }
                                Text {
                                    text: item.exe-path;
                                    font-size: DesignTokens.font-size-sm;
                                    color: DesignTokens.text-secondary;
                                    overflow: elide;
                                }
                            }

                            // Spacer to push checkbox to the right
                            Rectangle {
                                horizontal-stretch: 1;
                            }

                            // Enabled checkbox
                            CheckBox {
                                checked: item.enabled;
                                toggled => {
                                    toggle-enabled(index, self.checked);
                                }
                            }
                        }
                    }
                }
            }

            // Modern action toolbar
            HorizontalLayout {
                spacing: DesignTokens.space-md;

                StyledButton {
                    text: "Add Application(s)";
                    primary: true;
                    clicked => {
                        add-application();
                    }
                }
                StyledButton {
                    text: "Remove Selected";
                    enabled: selected-index >= 0;
                    clicked => {
                        remove-application(selected-index);
                    }
                }

                // Spacer
                Rectangle {
                    horizontal-stretch: 1;
                }

                // Settings button
                StyledButton {
                    text: "Settings";
                    clicked => {
                        settings-dialog.show();
                    }
                }
            }

            // Helpful tip with modern styling
            Rectangle {
                height: 40px;
                border-radius: DesignTokens.radius-md;
                background: DesignTokens.brand-accent.transparentize(0.9);
                border-width: 1px;
                border-color: DesignTokens.brand-accent.transparentize(0.7);

                HorizontalLayout {
                    padding: DesignTokens.space-md;
                    spacing: DesignTokens.space-sm;

                    Text {
                        text: "💡";
                        font-size: DesignTokens.font-size-lg;
                    }

                    Text {
                        text: "Tip: You can select multiple .exe files at once using the file dialog";
                        font-size: DesignTokens.font-size-sm;
                        color: DesignTokens.text-secondary;
                    }
                }
            }
        }
    }

    // Settings dialog popup (Task 12.1, Requirements 6.1-6.4)
    settings-dialog := PopupWindow {
        x: (parent.width - 500px) / 2;
        y: (parent.height - 400px) / 2;
        width: 500px;
        height: 400px;
        close-policy: PopupClosePolicy.no-auto-close;

        SettingsDialogContent {
            auto-start <=> settings-auto-start;
            monitoring-interval-ms <=> settings-monitoring-interval-ms;
            show-tray-notifications <=> settings-show-tray-notifications;
            minimize-to-tray-on-minimize <=> settings-minimize-to-tray-on-minimize;
            minimize-to-tray-on-close <=> settings-minimize-to-tray-on-close;

            save-settings(auto-start, monitoring-interval-ms, show-tray-notifications, minimize-to-tray-on-minimize, minimize-to-tray-on-close) => {
                root.save-settings(auto-start, monitoring-interval-ms, show-tray-notifications, minimize-to-tray-on-minimize, minimize-to-tray-on-close);
                settings-dialog.close();
            }

            cancel-settings => {
                settings-dialog.close();
            }
        }
    }
}

